{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alfani Media\\\\Desktop\\\\part3\\\\would-you-rather\\\\src\\\\components\\\\VoteTeaser.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { Header, Button } from 'semantic-ui-react';\nimport { colors } from '../utilities/helpers';\nexport class VoteTeaser extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      viewPoll: false\n    };\n\n    this.handleClick = e => {\n      this.setState(prevState => ({\n        viewPoll: !prevState.viewPoll\n      }));\n    };\n  }\n\n  render() {\n    const {\n      question,\n      unanswered\n    } = this.props;\n    const buttonColor = unanswered === true ? colors.green : colors.blue;\n    const buttonContent = unanswered === true ? 'Answer Poll' : 'Results';\n\n    if (this.state.viewPoll === true) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        push: true,\n        to: `/questions/${question.id}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 14\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      as: \"h5\",\n      textAlign: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }, \"Would you rather\"), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }, question.optionOne.text, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }\n    }), \"or...\"), /*#__PURE__*/React.createElement(Button, {\n      color: buttonColor.name,\n      size: \"tiny\",\n      fluid: true,\n      onClick: this.handleClick,\n      content: buttonContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\nVoteTeaser.propTypes = {\n  question: PropTypes.object.isRequired,\n  unanswered: PropTypes.bool.isRequired\n};\nexport default VoteTeaser;","map":{"version":3,"sources":["C:/Users/Alfani Media/Desktop/part3/would-you-rather/src/components/VoteTeaser.js"],"names":["React","Component","Fragment","PropTypes","Redirect","Header","Button","colors","VoteTeaser","state","viewPoll","handleClick","e","setState","prevState","render","question","unanswered","props","buttonColor","green","blue","buttonContent","id","textAlign","optionOne","text","name","propTypes","object","isRequired","bool"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,MAAT,EAAiBC,MAAjB,QAA+B,mBAA/B;AACA,SAASC,MAAT,QAAuB,sBAAvB;AAEA,OAAO,MAAMC,UAAN,SAAyBP,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAKxCQ,KALwC,GAKhC;AACNC,MAAAA,QAAQ,EAAE;AADJ,KALgC;;AAAA,SAQxCC,WARwC,GAQ1BC,CAAC,IAAI;AACjB,WAAKC,QAAL,CAAcC,SAAS,KAAK;AAC1BJ,QAAAA,QAAQ,EAAE,CAACI,SAAS,CAACJ;AADK,OAAL,CAAvB;AAGD,KAZuC;AAAA;;AAaxCK,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA2B,KAAKC,KAAtC;AACA,UAAMC,WAAW,GAAGF,UAAU,KAAK,IAAf,GAAsBV,MAAM,CAACa,KAA7B,GAAqCb,MAAM,CAACc,IAAhE;AACA,UAAMC,aAAa,GAAGL,UAAU,KAAK,IAAf,GAAsB,aAAtB,GAAsC,SAA5D;;AAEA,QAAI,KAAKR,KAAL,CAAWC,QAAX,KAAwB,IAA5B,EAAkC;AAChC,0BAAO,oBAAC,QAAD;AAAU,QAAA,IAAI,MAAd;AAAe,QAAA,EAAE,EAAG,cAAaM,QAAQ,CAACO,EAAG,EAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AACD,wBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAQ,MAAA,EAAE,EAAC,IAAX;AAAgB,MAAA,SAAS,EAAC,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,eAIE;AAAG,MAAA,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGR,QAAQ,CAACS,SAAT,CAAmBC,IADtB,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,UAJF,eASE,oBAAC,MAAD;AACE,MAAA,KAAK,EAAEP,WAAW,CAACQ,IADrB;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,KAAK,MAHP;AAIE,MAAA,OAAO,EAAE,KAAKhB,WAJhB;AAKE,MAAA,OAAO,EAAEW,aALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,CADF;AAmBD;;AAxCuC;AAA7Bd,U,CACJoB,S,GAAY;AACjBZ,EAAAA,QAAQ,EAAEb,SAAS,CAAC0B,MAAV,CAAiBC,UADV;AAEjBb,EAAAA,UAAU,EAAEd,SAAS,CAAC4B,IAAV,CAAeD;AAFV,C;AA0CrB,eAAetB,UAAf","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Header, Button } from 'semantic-ui-react';\r\nimport { colors } from '../utilities/helpers';\r\n\r\nexport class VoteTeaser extends Component {\r\n  static propTypes = {\r\n    question: PropTypes.object.isRequired,\r\n    unanswered: PropTypes.bool.isRequired\r\n  };\r\n  state = {\r\n    viewPoll: false\r\n  };\r\n  handleClick = e => {\r\n    this.setState(prevState => ({\r\n      viewPoll: !prevState.viewPoll\r\n    }));\r\n  };\r\n  render() {\r\n    const { question, unanswered } = this.props;\r\n    const buttonColor = unanswered === true ? colors.green : colors.blue;\r\n    const buttonContent = unanswered === true ? 'Answer Poll' : 'Results';\r\n\r\n    if (this.state.viewPoll === true) {\r\n      return <Redirect push to={`/questions/${question.id}`} />;\r\n    }\r\n    return (\r\n      <Fragment>\r\n        <Header as=\"h5\" textAlign=\"left\">\r\n          Would you rather\r\n        </Header>\r\n        <p style={{ textAlign: 'center' }}>\r\n          {question.optionOne.text}\r\n          <br />\r\n          or...\r\n        </p>\r\n        <Button\r\n          color={buttonColor.name}\r\n          size=\"tiny\"\r\n          fluid\r\n          onClick={this.handleClick}\r\n          content={buttonContent}\r\n        />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VoteTeaser;"]},"metadata":{},"sourceType":"module"}