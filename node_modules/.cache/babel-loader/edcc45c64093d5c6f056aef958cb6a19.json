{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alfani Media\\\\Desktop\\\\part3\\\\would-you-rather\\\\src\\\\components\\\\LeaderBoard.js\";\nimport React, { Component, Fragment } from 'react';\nimport PropType from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Segment, Grid, Header, Image, Label, Divider } from 'semantic-ui-react';\nconst trophyColor = ['yellow', 'grey', 'orange'];\nexport class Leaderboard extends Component {\n  render() {\n    const {\n      leaderboardData\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }\n    }, leaderboardData.map((user, idx) => /*#__PURE__*/React.createElement(Segment.Group, {\n      key: user.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      corner: \"left\",\n      icon: \"trophy\",\n      color: trophyColor[idx],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      divided: true,\n      padded: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 4,\n      verticalAlign: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Image, {\n      src: user.avatarURL,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      as: \"h3\",\n      textAlign: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 19\n      }\n    }, user.name), /*#__PURE__*/React.createElement(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }\n    }, \"Answered questions\"), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }\n    }, user.answerCount)), /*#__PURE__*/React.createElement(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }\n    }, \"Created questions\"), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }\n    }, user.questionCount))), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 4,\n      textAlign: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Segment.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      as: \"h5\",\n      block: true,\n      attached: \"top\",\n      content: \"Score\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      circular: true,\n      color: \"green\",\n      size: \"big\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 23\n      }\n    }, user.questionCount + user.answerCount)))))))));\n  }\n\n}\nLeaderboard.propType = {\n  leaderboardData: PropType.array.isRequired\n};\n\nfunction mapStateToProps({\n  users\n}) {\n  const leaderboardData = Object.values(users).map(user => ({\n    id: user.id,\n    name: user.name,\n    avatarURL: user.avatarURL,\n    answerCount: Object.values(user.answers).length,\n    questionCount: user.questions.length,\n    total: Object.values(user.answers).length + user.questions.length\n  })).sort((a, b) => a.total - b.total).reverse().slice(0, 3);\n  return {\n    leaderboardData\n  };\n}\n\nexport default connect(mapStateToProps)(Leaderboard);","map":{"version":3,"sources":["C:/Users/Alfani Media/Desktop/part3/would-you-rather/src/components/LeaderBoard.js"],"names":["React","Component","Fragment","PropType","connect","Segment","Grid","Header","Image","Label","Divider","trophyColor","Leaderboard","render","leaderboardData","props","map","user","idx","id","avatarURL","name","answerCount","questionCount","propType","array","isRequired","mapStateToProps","users","Object","values","answers","length","questions","total","sort","a","b","reverse","slice"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport PropType from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  Segment,\r\n  Grid,\r\n  Header,\r\n  Image,\r\n  Label,\r\n  Divider\r\n} from 'semantic-ui-react';\r\n\r\nconst trophyColor = ['yellow', 'grey', 'orange'];\r\n\r\nexport class Leaderboard extends Component {\r\n  static propType = {\r\n    leaderboardData: PropType.array.isRequired\r\n  };\r\n  render() {\r\n    const { leaderboardData } = this.props;\r\n\r\n    return (\r\n      <Fragment>\r\n        {leaderboardData.map((user, idx) => (\r\n          <Segment.Group key={user.id}>\r\n            <Label corner=\"left\" icon=\"trophy\" color={trophyColor[idx]} />\r\n            <Grid divided padded>\r\n              <Grid.Row>\r\n                <Grid.Column width={4} verticalAlign=\"middle\">\r\n                  <Image src={user.avatarURL} />\r\n                </Grid.Column>\r\n                <Grid.Column width={8}>\r\n                  <Header as=\"h3\" textAlign=\"left\">\r\n                    {user.name}\r\n                  </Header>\r\n                  <Grid>\r\n                    <Grid.Column width={12}>Answered questions</Grid.Column>\r\n                    <Grid.Column width={4}>{user.answerCount}</Grid.Column>\r\n                  </Grid>\r\n                  <Divider />\r\n                  <Grid>\r\n                    <Grid.Column width={12}>Created questions</Grid.Column>\r\n                    <Grid.Column width={4}>{user.questionCount}</Grid.Column>\r\n                  </Grid>\r\n                </Grid.Column>\r\n                <Grid.Column width={4} textAlign=\"center\">\r\n                  <Segment.Group>\r\n                    <Header as=\"h5\" block attached=\"top\" content=\"Score\" />\r\n                    <Segment>\r\n                      <Label circular color=\"green\" size=\"big\">\r\n                        {user.questionCount + user.answerCount}\r\n                      </Label>\r\n                    </Segment>\r\n                  </Segment.Group>\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n            </Grid>\r\n          </Segment.Group>\r\n        ))}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps({ users }) {\r\n  const leaderboardData = Object.values(users)\r\n    .map(user => ({\r\n      id: user.id,\r\n      name: user.name,\r\n      avatarURL: user.avatarURL,\r\n      answerCount: Object.values(user.answers).length,\r\n      questionCount: user.questions.length,\r\n      total: Object.values(user.answers).length + user.questions.length\r\n    }))\r\n    .sort((a, b) => a.total - b.total)\r\n    .reverse()\r\n    .slice(0, 3);\r\n  return {\r\n    leaderboardData\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Leaderboard);"]},"metadata":{},"sourceType":"module"}