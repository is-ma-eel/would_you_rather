{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alfani Media\\\\Desktop\\\\part3\\\\would-you-rather\\\\src\\\\components\\\\Card.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Segment, Header, Grid, Image } from 'semantic-ui-react';\nimport PollQuestion from './PollQuestion';\nimport PollResult from './PollResult';\nimport PollTeaser from './PollTeaser';\nimport { colors } from '../utils/helpers';\nconst pollTypes = {\n  POLL_TEASER: 'POLL_TEASER',\n  POLL_QUESTION: 'POLL_QUESTION',\n  POLL_RESULT: 'POLL_RESULT'\n};\n\nconst PollContent = props => {\n  const {\n    pollType,\n    question,\n    unanswered\n  } = props;\n\n  switch (pollType) {\n    case pollTypes.POLL_TEASER:\n      return /*#__PURE__*/React.createElement(PollTeaser, {\n        question: question,\n        unanswered: unanswered,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 14\n        }\n      });\n\n    case pollTypes.POLL_QUESTION:\n      return /*#__PURE__*/React.createElement(PollQuestion, {\n        question: question,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 14\n        }\n      });\n\n    case pollTypes.POLL_RESULT:\n      return /*#__PURE__*/React.createElement(PollResult, {\n        question: question,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 14\n        }\n      });\n\n    default:\n      return;\n  }\n};\n\nexport class UserCard extends Component {\n  render() {\n    const {\n      author,\n      question,\n      pollType,\n      badPath,\n      unanswered = null\n    } = this.props;\n\n    if (badPath === true) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/questions/bad_id\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 14\n        }\n      });\n    }\n\n    const tabColor = unanswered === true ? colors.green : colors.blue;\n    const borderTop = unanswered === null ? `1px solid ${colors.grey}` : `2px solid ${tabColor.hex}`;\n    return /*#__PURE__*/React.createElement(Segment.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      as: \"h5\",\n      textAlign: \"left\",\n      block: true,\n      attached: \"top\",\n      style: {\n        borderTop: borderTop\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, author.name, \" asks:\"), /*#__PURE__*/React.createElement(Grid, {\n      divided: true,\n      padded: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Image, {\n      src: author.avatarURL,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Grid.Column, {\n      width: 11,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(PollContent, {\n      pollType: pollType,\n      question: question,\n      unanswered: unanswered,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n}\nUserCard.propTypes = {\n  question: PropTypes.object,\n  author: PropTypes.object,\n  pollType: PropTypes.string,\n  unanswered: PropTypes.bool,\n  question_id: PropTypes.string\n};\n\nfunction mapStateToProps({\n  users,\n  questions,\n  authUser\n}, {\n  match,\n  question_id\n}) {\n  let question,\n      author,\n      pollType,\n      badPath = false;\n\n  if (question_id !== undefined) {\n    question = questions[question_id];\n    author = users[question.author];\n    pollType = pollTypes.POLL_TEASER;\n  } else {\n    const {\n      question_id\n    } = match.params;\n    question = questions[question_id];\n    const user = users[authUser];\n\n    if (question === undefined) {\n      badPath = true;\n    } else {\n      author = users[question.author];\n      pollType = pollTypes.POLL_QUESTION;\n\n      if (Object.keys(user.answers).includes(question.id)) {\n        pollType = pollTypes.POLL_RESULT;\n      }\n    }\n  }\n\n  return {\n    badPath,\n    question,\n    author,\n    pollType\n  };\n}\n\nexport default connect(mapStateToProps)(UserCard);","map":{"version":3,"sources":["C:/Users/Alfani Media/Desktop/part3/would-you-rather/src/components/Card.js"],"names":["React","Component","PropTypes","connect","Redirect","Segment","Header","Grid","Image","PollQuestion","PollResult","PollTeaser","colors","pollTypes","POLL_TEASER","POLL_QUESTION","POLL_RESULT","PollContent","props","pollType","question","unanswered","UserCard","render","author","badPath","tabColor","green","blue","borderTop","grey","hex","name","avatarURL","propTypes","object","string","bool","question_id","mapStateToProps","users","questions","authUser","match","undefined","params","user","Object","keys","answers","includes","id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Segment, Header, Grid, Image } from 'semantic-ui-react';\r\nimport PollQuestion from './PollQuestion';\r\nimport PollResult from './PollResult';\r\nimport PollTeaser from './PollTeaser';\r\nimport { colors } from '../utils/helpers';\r\n\r\nconst pollTypes = {\r\n  POLL_TEASER: 'POLL_TEASER',\r\n  POLL_QUESTION: 'POLL_QUESTION',\r\n  POLL_RESULT: 'POLL_RESULT'\r\n};\r\n\r\nconst PollContent = props => {\r\n  const { pollType, question, unanswered } = props;\r\n\r\n  switch (pollType) {\r\n    case pollTypes.POLL_TEASER:\r\n      return <PollTeaser question={question} unanswered={unanswered} />;\r\n    case pollTypes.POLL_QUESTION:\r\n      return <PollQuestion question={question} />;\r\n    case pollTypes.POLL_RESULT:\r\n      return <PollResult question={question} />;\r\n    default:\r\n      return;\r\n  }\r\n};\r\n\r\nexport class UserCard extends Component {\r\n  static propTypes = {\r\n    question: PropTypes.object,\r\n    author: PropTypes.object,\r\n    pollType: PropTypes.string,\r\n    unanswered: PropTypes.bool,\r\n    question_id: PropTypes.string\r\n  };\r\n  render() {\r\n    const {\r\n      author,\r\n      question,\r\n      pollType,\r\n      badPath,\r\n      unanswered = null\r\n    } = this.props;\r\n\r\n    if (badPath === true) {\r\n      return <Redirect to=\"/questions/bad_id\" />;\r\n    }\r\n\r\n    const tabColor = unanswered === true ? colors.green : colors.blue;\r\n    const borderTop =\r\n      unanswered === null\r\n        ? `1px solid ${colors.grey}`\r\n        : `2px solid ${tabColor.hex}`;\r\n\r\n    return (\r\n      <Segment.Group>\r\n        <Header\r\n          as=\"h5\"\r\n          textAlign=\"left\"\r\n          block\r\n          attached=\"top\"\r\n          style={{ borderTop: borderTop }}\r\n        >\r\n          {author.name} asks:\r\n        </Header>\r\n\r\n        <Grid divided padded>\r\n          <Grid.Row>\r\n            <Grid.Column width={5}>\r\n              <Image src={author.avatarURL} />\r\n            </Grid.Column>\r\n            <Grid.Column width={11}>\r\n              <PollContent\r\n                pollType={pollType}\r\n                question={question}\r\n                unanswered={unanswered}\r\n              />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </Segment.Group>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(\r\n  { users, questions, authUser },\r\n  { match, question_id }\r\n) {\r\n  let question,\r\n    author,\r\n    pollType,\r\n    badPath = false;\r\n  if (question_id !== undefined) {\r\n    question = questions[question_id];\r\n    author = users[question.author];\r\n    pollType = pollTypes.POLL_TEASER;\r\n  } else {\r\n    const { question_id } = match.params;\r\n    question = questions[question_id];\r\n    const user = users[authUser];\r\n\r\n    if (question === undefined) {\r\n      badPath = true;\r\n    } else {\r\n      author = users[question.author];\r\n      pollType = pollTypes.POLL_QUESTION;\r\n      if (Object.keys(user.answers).includes(question.id)) {\r\n        pollType = pollTypes.POLL_RESULT;\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    badPath,\r\n    question,\r\n    author,\r\n    pollType\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(UserCard);"]},"metadata":{},"sourceType":"module"}