{"ast":null,"code":"import { saveQuestion } from '../utilities/api';\nimport { addQuestionsToUser } from '../actions/users';\nexport const RECEIVE_QUESTIONS = 'RECEIVE_QUESTIONS';\nexport const ADD_ANSWER_TO_QUESTION = 'ADD_ANSWER_TO_QUESTION';\nexport const ADD_QUESTION = 'ADD_QUESTION';\nexport function receiveQuestions(questions) {\n  return {\n    type: RECEIVE_QUESTIONS,\n    questions\n  };\n}\nexport function addAnswerToQuestion(authUser, qid, answer) {\n  return {\n    type: ADD_ANSWER_TO_QUESTION,\n    authUser,\n    qid,\n    answer\n  };\n}\n\nfunction addQuestion(question) {\n  return {\n    type: ADD_QUESTION,\n    question\n  };\n}\n\nexport function handleSaveQuestion(optionOneText, optionTwoText, author) {\n  return dispatch => {\n    return saveQuestions({\n      optionOneText,\n      optionTwoText,\n      author\n    }).then(question => {\n      dispatch(addQuestion(question));\n      dispatch(addQuestionsToUser(question));\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/Alfani Media/Desktop/part3/would-you-rather/src/actions/questions.js"],"names":["saveQuestion","addQuestionsToUser","RECEIVE_QUESTIONS","ADD_ANSWER_TO_QUESTION","ADD_QUESTION","receiveQuestions","questions","type","addAnswerToQuestion","authUser","qid","answer","addQuestion","question","handleSaveQuestion","optionOneText","optionTwoText","author","dispatch","saveQuestions","then"],"mappings":"AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AAEA,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,YAAY,GAAG,cAArB;AAEP,OAAO,SAASC,gBAAT,CAA0BC,SAA1B,EAAqC;AAC1C,SAAO;AACLC,IAAAA,IAAI,EAAEL,iBADD;AAELI,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASE,mBAAT,CAA6BC,QAA7B,EAAuCC,GAAvC,EAA4CC,MAA5C,EAAoD;AACzD,SAAO;AACLJ,IAAAA,IAAI,EAAEJ,sBADD;AAELM,IAAAA,QAFK;AAGLC,IAAAA,GAHK;AAILC,IAAAA;AAJK,GAAP;AAMD;;AAED,SAASC,WAAT,CAAqBC,QAArB,EAA+B;AAC7B,SAAO;AACLN,IAAAA,IAAI,EAAEH,YADD;AAELS,IAAAA;AAFK,GAAP;AAID;;AAED,OAAO,SAASC,kBAAT,CAA4BC,aAA5B,EAA2CC,aAA3C,EAA0DC,MAA1D,EAAkE;AACvE,SAAOC,QAAQ,IAAI;AACjB,WAAOC,aAAa,CAAC;AAAEJ,MAAAA,aAAF;AAAiBC,MAAAA,aAAjB;AAAgCC,MAAAA;AAAhC,KAAD,CAAb,CAAwDG,IAAxD,CACLP,QAAQ,IAAI;AACVK,MAAAA,QAAQ,CAACN,WAAW,CAACC,QAAD,CAAZ,CAAR;AACAK,MAAAA,QAAQ,CAACjB,kBAAkB,CAACY,QAAD,CAAnB,CAAR;AACD,KAJI,CAAP;AAMD,GAPD;AAQD","sourcesContent":["import { saveQuestion } from '../utilities/api';\r\nimport { addQuestionsToUser } from '../actions/users';\r\n\r\nexport const RECEIVE_QUESTIONS = 'RECEIVE_QUESTIONS';\r\nexport const ADD_ANSWER_TO_QUESTION = 'ADD_ANSWER_TO_QUESTION';\r\nexport const ADD_QUESTION = 'ADD_QUESTION';\r\n\r\nexport function receiveQuestions(questions) {\r\n  return {\r\n    type: RECEIVE_QUESTIONS,\r\n    questions \r\n  };\r\n}\r\n\r\nexport function addAnswerToQuestion(authUser, qid, answer) {\r\n  return {\r\n    type: ADD_ANSWER_TO_QUESTION, \r\n    authUser,\r\n    qid,\r\n    answer \r\n  };\r\n}\r\n\r\nfunction addQuestion(question) {\r\n  return {\r\n    type: ADD_QUESTION,\r\n    question \r\n  };\r\n}\r\n\r\nexport function handleSaveQuestion(optionOneText, optionTwoText, author) {\r\n  return dispatch => {\r\n    return saveQuestions({ optionOneText, optionTwoText, author }).then(\r\n      question => {\r\n        dispatch(addQuestion(question));\r\n        dispatch(addQuestionsToUser(question));\r\n      }\r\n    );\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}